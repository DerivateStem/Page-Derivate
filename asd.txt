
import os
import numpy as np
import pandas as pd
from scipy.integrate import cumtrapz, trapz
from prospect.models import priors
from prospect.models.sedmodel import PolySpecModel
from prospect.models.templates import TemplateLibrary
from prospect.sources import FastStepBasis
from sedpy.observate import load_filters
from astropy.cosmology import FlatLambdaCDM
from astropy.io import fits
from scipy import interpolate
from prospect.likelihood import NoiseModel
from prospect.likelihood.kernels import Uncorrelated
from matplotlib import pyplot as plt
from corner import corner

# Setup Cosmology
cosmo = FlatLambdaCDM(H0=70, Om0=0.3, Tcmb0=2.725)

# Run Parameters
run_params = {{
    'verbose': True,
    'debug': False,
    'outfile': 'jwst_fit_results',
    'objid': 47714,
    'objname': '47714',
    'catfile': 'fnu_phot_RUBIES_UDS_47714.cat',
    'specfile': 'rubies-uds3-nod-v3_prism-clear_4233_47714.spec.fits',
    'zspec': 3.2005,
    'nbins_sfh': 10,
    'polyorder': 2,
    'free_metallicity': True,
    'Z_init': 0.0,
    'nested_bound': 'multi',
    'nested_sample': 'rwalk',
    'nested_nlive_init': 2000,
    'nested_nlive_batch': 400,
    'nested_target_n_effective': 200000,
    'nested_dlogz_init': 0.01
}}

# Load Observations
def load_obs(objname, catfile, specfile, zspec, **kwargs):
    obs = {{}}
    filters = load_filters(['jwst_f090w', 'jwst_f115w', 'jwst_f150w', 'jwst_f200w',
                            'jwst_f277w', 'jwst_f356w', 'jwst_f410m', 'jwst_f444w', 'jwst_f770w'])
    weff = np.array([f.wave_effective for f in filters])
    cat = pd.read_csv(catfile, delim_whitespace=True)
    phot = cat['fnu'].values * 1e-6
    phot_err = cat['efnu'].values * 1e-6
    phot[phot == -99] = np.nan
    phot_err[phot == -99] = np.nan
    jy_to_maggies = 1 / 3631
    obs['maggies'] = phot * jy_to_maggies
    obs['maggies_unc'] = phot_err * jy_to_maggies
    obs['phot_mask'] = ~np.isnan(phot)
    obs['filters'] = filters
    obs['wave_effective'] = weff
    obs['zspec'] = zspec
    spec = pd.read_csv(specfile, delim_whitespace=True)
    obs['wavelength'] = spec['wav'].values * 1e4
    obs['spectrum'] = spec['fnu'].values * jy_to_maggies * 1e-6
    obs['unc'] = spec['enu'].values * jy_to_maggies * 1e-6
    nirspec = fits.open(specfile)
    nirspec_wave = nirspec[1].data['WAVELENGTH'] * 1e4
    nirspec_R = nirspec[1].data['R'] * 1.3
    func_nirspec = interpolate.interp1d(nirspec_wave, 3e5 / (nirspec_R * 2.355))
    obs['sigma_v'] = func_nirspec(obs['wavelength'])
    mask = np.isfinite(obs['spectrum']) & np.isfinite(obs['unc']) & (obs['unc'] > 0)
    obs['mask'] = mask
    return obs

# Load Model
def load_model(zspec, nbins_sfh, polyorder, free_metallicity, Z_init, **kwargs):
    model_params = TemplateLibrary["continuity_sfh"]
    model_params.update(TemplateLibrary["optimize_speccal"])
    model_params['polyorder']['init'] = polyorder
    tuniv = cosmo.age(zspec).value * 1e9
    agelims = np.log10(np.linspace(1e6, tuniv, nbins_sfh + 1))
    model_params['agebins']['init'] = np.array([agelims[:-1], agelims[1:]]).T
    if free_metallicity:
        model_params['logzsol']['isfree'] = True
        model_params['logzsol']['init'] = Z_init
    else:
        model_params['logzsol']['isfree'] = False
        model_params['logzsol']['init'] = Z_init
    model = PolySpecModel(model_params)
    return model

# Load SPS
def load_sps(zcontinuous=1, **kwargs):
    return FastStepBasis(zcontinuous=zcontinuous)

# Load Noise Model
def build_noise(**kwargs):
    jitter = Uncorrelated(parnames=['spec_jitter'])
    return NoiseModel(kernels=[jitter]), None

# Main Execution
if __name__ == '__main__':
    obs = load_obs(**run_params)
    model = load_model(**run_params)
    sps = load_sps(**run_params)
    noise = build_noise(**run_params)
    print("Observations and model loaded successfully.")
